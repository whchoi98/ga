#########################################################################################################
# 1 VPC, 1 NATGW, 2 AZ, 1 Public RT, 2 Private RT, 2 Publice Subnet, 2 Private Subnet, 2 Attach Subnet  #
# ap-northeast-2 #
#########################################################################################################

Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: "VPC Parameters"
        Parameters:
         - AvailabilityZoneA
         - AvailabilityZoneB
         - VPCCIDRBlock
         - PublicSubnetABlock
         - PublicSubnetBBlock
         - PrivateSubnetABlock
         - PrivateSubnetBBlock
         - AttachSubnetABlock
         - AttachSubnetBBlock
         - InstanceType

############################################################################################
############################################################################################
# Create Parmeters                              ############################################
############################################################################################
############################################################################################

################################################################################################
# Create-Parameters : AZ,VPC CIDR Blcok, Public, Private Subnet Block, InstanceType
# PublicKey, AMIid
################################################################################################

Parameters:
  AvailabilityZoneA:
    Description: "Choose AZ1 for your VPC."
    Type: AWS::EC2::AvailabilityZone::Name
    Default: "ap-northeast-2a"
  AvailabilityZoneB:
    Description: "Choose AZ2 for your VPC."
    Type: AWS::EC2::AvailabilityZone::Name
    Default: "ap-northeast-2b"

  VPCCIDRBlock:
    Type: String
    Default: 10.12.0.0/16
    Description: "The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range."

  PublicSubnetABlock:
    Type: String
    Default: 10.12.11.0/24
    Description: "CidrBlock for AZ A public subnet A within the VPC"

  PublicSubnetBBlock:
    Type: String
    Default: 10.12.12.0/24
    Description: "CidrBlock for AZ B public subnet B within the VPC" 

  PrivateSubnetABlock:
    Type: String
    Default: 10.12.21.0/24
    Description: "CidrBlock for AZ A private subnet A within the VPC"

  PrivateSubnetBBlock:
    Type: String
    Default: 10.12.22.0/24
    Description: "CidrBlock for AZ B private subnet B within the VPC"
 
  AttachSubnetABlock:
    Type: String
    Default: 10.12.251.0/24
    Description: "CidrBlock for AZ A TGW subnet A within the VPC"

  AttachSubnetBBlock:
    Type: String
    Default: 10.12.252.0/24
    Description: "CidrBlock for AZ B TGW subnet B within the VPC"

  InstanceType:
    Type: String
    Default: "m5.4xlarge"
    Description: EC2 Instance Type for the VPC.

  KeyPair:
    Description: "Keypair to access the EC2 Instance"
    Type: "AWS::EC2::KeyPair::KeyName"
    Default: "mykey"

  LatestAmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"

############################################################################################
############################################################################################
# Create Resource                            ###############################################
############################################################################################
############################################################################################

Resources:

############################################################################################
############################################################################################
# Create VPC                                 ###############################################
############################################################################################
############################################################################################

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDRBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}'
        - Key: project
          Value: !Sub '${AWS::StackName}'


############################################################################################
############################################################################################
# Create IGW                                 ###############################################
############################################################################################
############################################################################################


###############################################################
# Create-IGW: Create VPC InternetGateway and VPC Attach #
###############################################################

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-IGW'

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

############################################################################################
############################################################################################
# Create NATGW                               ###############################################
############################################################################################
############################################################################################


#############################################################
# Create-NATGW: Create VPC NATGateway and PublicSubnet Assign
#############################################################

  NatGatewayAEIP:
    DependsOn:
    - AttachGateway
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-NATGW-A-EIP'

  NatGatewayA:
    DependsOn:
    - NatGatewayAEIP
    - PublicSubnetA
    - AttachGateway
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayAEIP.AllocationId'
      SubnetId: !Ref PublicSubnetA
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-NATGW-A'

############################################################################################
############################################################################################
# Create Subnets and RouteTables              ###############################################
############################################################################################
############################################################################################

####################################################
# Create-Public-Subnet: VPC Public_Subnet_a,b #
####################################################

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetABlock
      AvailabilityZone: !Ref AvailabilityZoneA
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicSubnetA'
        - Key: kubernetes.io/role/elb
          Value: 1

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetBBlock
      AvailabilityZone: !Ref AvailabilityZoneB
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicSubnetB'
        - Key: kubernetes.io/role/elb
          Value: 1

################################################
# Create-RouteTable: Public Route Table        #
################################################

  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicRT'

  PublicRoute:
    DependsOn: AttachGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

######################################################################################################
# Associate-Publice-RouteTable: VPC Public Subnet a,b Accsociate VPC Public Subnet Route Table       #
######################################################################################################

  PublicSubnetRouteTableAAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicSubnetRouteTable

  PublicSubnetRouteTableBAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicSubnetRouteTable

#############################################################
# Create-Private-Subnet: Create VPC Private_Subnet_a,b      #
#############################################################

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetABlock
      AvailabilityZone: !Ref AvailabilityZoneA
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateSubnetA'
        - Key: kubernetes.io/role/internal-elb
          Value: 1

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetBBlock
      AvailabilityZone: !Ref AvailabilityZoneB
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateSubnetB'
        - Key: kubernetes.io/role/internal-elb
          Value: 1

#####################################################################
# Create-Private-RouteTable: Create VPC_Private_RouteTable_a,b      #
#####################################################################
  PrivateSubnetARouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private-Subnet-A-RT'

  PrivateSubnetBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Private-Subnet-B-RT'

  PrivateSubnetARoute1:
    DependsOn:
    - AttachGateway
    - NatGatewayA
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnetARouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA

  PrivateSubnetBRoute1:
    DependsOn:
    - AttachGateway
    - NatGatewayA
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnetBRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA


################################################################################################
# Associate-Private-RouteTable: VPC_Private_Subnet_a,b Accsociate VPC_Private_RouteTable #
################################################################################################

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA   
      RouteTableId: !Ref PrivateSubnetARouteTable

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateSubnetBRouteTable

#############################################################
# CreateAttachSubnet: Create VPC TGW_Subnet_a,b #
#############################################################

  AttachSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref AttachSubnetABlock
      AvailabilityZone: !Ref AvailabilityZoneA
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-AttachSubnetA'

  AttachSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref AttachSubnetBBlock
      AvailabilityZone: !Ref AvailabilityZoneB
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-AttachSubnetB'

#####################################################################
# CreateCloudWANRouteTable: Create VPC_CloudWAN_RouteTable_a,b #
#####################################################################

  AttachSubnetARouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}AttachSubnet-A-RT'

  AttachSubnetBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}AttachSubnet-B-RT'
 
  AttachSubnetARoute1:
    DependsOn:
    - AttachGateway
    - NatGatewayA
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref AttachSubnetARouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA

  AttachSubnetBRoute1:
    DependsOn:
    - AttachGateway
    - NatGatewayA
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref AttachSubnetBRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayA
      
      
################################################################################################
# AssociateCloudWANRouteTable: VPC_CloudWAN_Subnet_a,b Accsociate VPC_CloudWAN_RouteTable #
################################################################################################

  AttachSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AttachSubnetA   
      RouteTableId: !Ref AttachSubnetARouteTable

  AttachSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref AttachSubnetB
      RouteTableId: !Ref AttachSubnetBRouteTable


############################################################################################
############################################################################################
# Create Security Groups                            ########################################
############################################################################################
############################################################################################


###############################################################################
# Create-Security-Group: Public EC2 Security Groups #
###############################################################################

  LocustEC2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open-up ports for ICMP and SSH,HTTP/S,Locust Web Port from All network
      GroupName:  LocustEC2SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: icmp
          CidrIp: 0.0.0.0/0
          FromPort: "-1"
          ToPort: "-1"
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: "22"
          ToPort: "22"
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: "80"
          ToPort: "80"
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: "443"
          ToPort: "443"
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: "8089"
          ToPort: "8089"        
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-LocustEC2SG'

###############################################################################
# Create-Security-Group: Private EC2 Security Groups #
###############################################################################

  PrivateEC2SG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open-up ports for ICMP and SSH,HTTP/S from All network
      GroupName: PrivateEC2SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: icmp
          CidrIp: 0.0.0.0/0
          FromPort: "-1"
          ToPort: "-1"
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: "22"
          ToPort: "22"
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: "80"
          ToPort: "80"
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: "443"
          ToPort: "443"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateSG'

###############################################################################
# Create-Security-Group: System Manager Security Groups #
###############################################################################

  SSMSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open-up ports for HTTP/S from All network
      GroupName: SSMSG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: "80"
          ToPort: "80"
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: "443"
          ToPort: "443"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-SSMSG'


############################################################################################
############################################################################################
# Create IAM Role                                   ########################################
############################################################################################
############################################################################################


##########################################
# Create-EC2Role: Create EC2 ServerRole  #
##########################################

  ServerRoleSSM:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-SSMRole'
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole

  InstanceProfileSSM:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles: 
        - Ref: ServerRoleSSM


############################################################################################
############################################################################################
# Create EndPoint                                ###########################################
############################################################################################
############################################################################################


######################################################################
# Create-System-Manager-Endpoint: Create VPC SystemManager Endpoint #
######################################################################

  SSMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      VpcEndpointType: Interface
      PrivateDnsEnabled: True
      SubnetIds: 
        - Ref: PrivateSubnetA
        - Ref: PrivateSubnetB
      SecurityGroupIds:
        - Ref: SSMSG

  SSMMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
      VpcEndpointType: Interface
      PrivateDnsEnabled: True
      SubnetIds: 
        - Ref: PrivateSubnetA
        - Ref: PrivateSubnetB
      SecurityGroupIds:
        - Ref: SSMSG

############################################################################################
############################################################################################
# Create EC2                                 ###############################################
############################################################################################
############################################################################################


##############################################
# Create-Public-EC2: VPC Public EC2 Create  #
##############################################

  LocustInstance1:
    Type: AWS::EC2::Instance
    DependsOn: PublicSubnetA
    Properties:
      SubnetId: !Ref PublicSubnetA
      ImageId: !Ref LatestAmiId
      PrivateIpAddress: 10.12.11.101
      InstanceType: !Ref InstanceType
      SecurityGroupIds: 
        - Ref: LocustEC2SG
      KeyName: !Ref KeyPair
      IamInstanceProfile: !Ref InstanceProfileSSM
      BlockDeviceMappings: 
        - DeviceName: /dev/xvda
          Ebs: 
            VolumeSize: 10
            VolumeType: gp3
            Iops: 3000
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Locust-10.12.11.101'
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            sudo yum -y update
            sudo yum -y install yum-utils 
            sudo yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            sudo yum -y install iotop iperf3 iptraf tcpdump git bash-completion 
            sudo yum -y install httpd php mysql php-mysql 
            sudo yum -y install python-pip
            sudo yum -y install nethogs iftop lnav nmon tmux wireshark vsftpd ftp
            sudo systemctl start httpd
            sudo systemctl enable httpd
            cd /var/www/html/
            sudo git clone https://github.com/whchoi98/ec2meta-webpage.git
            sudo systemctl restart httpd
            sudo pip install locust    
            sudo systemctl restart httpd
            exit

###############
# VPC Outputs #
###############
Outputs:
  VPC:
    Description: VPC
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}"

  AttachSubnetA:
    Description: AttachSubnetA
    Value: !Ref AttachSubnetA
    Export:
      Name: !Sub "${AWS::StackName}-AttachSubnetA"

  AttachSubnetB:
    Description: AttachSubnetB
    Value: !Ref AttachSubnetB
    Export:
      Name: !Sub "${AWS::StackName}-AttachSubnetB"

  PublicSubnetA:
    Description: PublicSubnetA
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetA"

  PublicSubnetBBlock:
    Description: PublicSubnetB
    Value: !Ref PublicSubnetB
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetB"

  PrivateSubnetABlock:
    Description: PrivateSubnetA
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetA"

  PrivateSubnetBBlock:
    Description: PrivateSubnetB
    Value: !Ref PrivateSubnetB
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetB"

  LocustInstance1:
    Description: LocustInstance1PublicIP
    Value: !GetAtt LocustInstance1.PublicIp
    Export:
      Name: !Sub "LocustInstance1PublicIP"

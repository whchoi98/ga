### Cloud9
pip3 install --user --upgrade boto3
export instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)

python -c "import boto3
import os
from botocore.exceptions import ClientError 
ec2 = boto3.client('ec2')
volume_info = ec2.describe_volumes(
    Filters=[
        {
            'Name': 'attachment.instance-id',
            'Values': [
                os.getenv('instance_id')
            ]
        }
    ]
)
volume_id = volume_info['Volumes'][0]['VolumeId']
try:
    resize = ec2.modify_volume(    
            VolumeId=volume_id,    
            Size=100
    )
    print(resize)
except ClientError as e:
    if e.response['Error']['Code'] == 'InvalidParameterValue':
        print('ERROR MESSAGE: {}'.format(e))"
if [ $? -eq 0 ]; then
    sudo reboot
fi


### Cloud9 AWS Cli 2.0 Install

curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install
source ~/.bashrc
aws --version

which aws_completer
export PATH=/usr/local/bin:$PATH
source ~/.bash_profile
complete -C '/usr/local/bin/aws_completer' aws

### Cloud9 Session Manager Plugin
curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/linux_64bit/session-manager-plugin.rpm" -o "session-manager-plugin.rpm"
sudo sudo yum install -y session-manager-plugin.rpm

### Cloud9 util setup

sudo yum -y install jq gettext bash-completion moreutils
for command in kubectl jq envsubst aws
  do
    which $command &>/dev/null && echo "$command in path" || echo "$command NOT FOUND"
  done

### Cloud9 SSH Key for GWLB VPC EC2 and Appliance EC2
cd ~/environment/
ssh-keygen
### keyname=mykey

cd ~/environment/
mv ./mykey ./mykey.pem
chmod 400 ./mykey.pem
export mykey=mykey

cd ~/environment/
aws ec2 import-key-pair --key-name "mykey" --public-key-material fileb://./mykey.pub --region ap-northeast-2
aws ec2 import-key-pair --key-name "mykey" --public-key-material fileb://./mykey.pub --region ap-southeast-1

## S3 bucket 생성
export bucket_name="whchoi1031"
echo "export bucket_name=${bucket_name}" | tee -a ~/.bash_profile
aws s3 mb s3://${bucket_name}

### Gitclone
git clone https://github.com/whchoi98/awsga_dr

## Create VPC
~/awsga_dr/
cd ~/awsga_dr
aws cloudformation deploy \
  --region ap-northeast-2 \
  --stack-name "ICNVPC" \
  --template-file "ICNVPC.yaml" \
  --parameter-overrides "KeyPair=$mykey" \
  --capabilities CAPABILITY_NAMED_IAM \
  --s3-bucket ${bucket_name} &
aws cloudformation deploy \
  --region ap-southeast-1 \
  --stack-name "SINVPC" \
  --template-file "aws cloudformation deploy \
  --region ap-southeast-1 \
  --stack-name "SINVPC" \
  --template-file "INVPC.yaml" \
  --parameter-overrides "KeyPair=$mykey" \
  --capabilities CAPABILITY_NAMED_IAMSINVPC.yaml" \
  --parameter-overrides "KeyPair=$mykey" \
  --capabilities CAPABILITY_NAMED_IAM &
aws cloudformation deploy \
  --region ap-northeast-2 \
  --stack-name "Client" \
  --template-file "Client.yaml" \
  --parameter-overrides "KeyPair=$mykey" \
  --capabilities CAPABILITY_NAMED_IAM

aws cloudformation describe-stacks --stack-name ICNVPC --region ap-northeast-2 | jq -r '.Stacks[].Outputs[].OutputValue' | grep aws | awk NR==1
aws cloudformation describe-stacks --stack-name ICNVPC --region ap-northeast-2 | jq -r '.Stacks[].Outputs[].OutputValue' | grep aws | awk NR==2

export awsga_svr1="$(aws cloudformation describe-stacks --stack-name ICNVPC --region ap-northeast-2 | jq -r '.Stacks[].Outputs[].OutputValue' | grep aws | awk NR==1)"
export awsga_svr2="$(aws cloudformation describe-stacks --stack-name ICNVPC --region ap-northeast-2 | jq -r '.Stacks[].Outputs[].OutputValue' | grep aws | awk NR==2)"
echo "export awsga_svr1_url=${awsga_svr1}/ec2meta-webpage/index.php" | tee -a ~/.bash_profile
echo "export awsga_svr2_url=${awsga_svr2}/ec2meta-webpage/index.php" | tee -a ~/.bash_profile
source ~/.bash_profile

#locust ec2
aws ec2 describe-instances --filters 'Name=tag:Name,Values=Client-Locust-10.12.11.101' 'Name=instance-state-name,Values=running' | jq -r '.Reservations[].Instances[].InstanceId'
export Locust_EC2_01=$(aws ec2 describe-instances --filters 'Name=tag:Name,Values=Client-Locust-10.12.11.101' 'Name=instance-state-name,Values=running' | jq -r '.Reservations[].Instances[].InstanceId')
echo "export Locust_EC2_01=${Locust_EC2_01}" | tee -a ~/.bash_profile
source ~/.bash_profile
aws ssm start-session --target $Locust_EC2_01

#locust ec2 환경
sudo -s
mkdir ~/temp
cd ~/temp
export awsga_svr1=a384ea5fc5bdacb8a.awsglobalaccelerator.com
export awsga_svr2=ac68b9c9a1c1ef209.awsglobalaccelerator.com
echo "export awsga_svr1=${awsga_svr1}" | tee -a ~/.bash_profile
echo "export awsga_svr2_url=${awsga_svr2}" | tee -a ~/.bash_profile
source ~/.bash_profile


while true; do curl http://${awsga_svr1_url}|grep "AP-"; sleep 1 ; done




sudo tcpdump -nvv 'port 6081' | grep 'ICMP'
sudo tcpdump -nvv 'port 6081' | grep "HTTP: GET"
sudo tcpdump -nvv 'port 6081' | grep "http"
sudo tcpdump -nvv 'port 6081' | grep "13.209.89.111"


